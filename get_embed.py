#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct  6 00:53:54 2022

@author: ziyi
"""
import os
import argparse
import json
from pathlib import Path
import openai

from gpt3 import GPT3
from utils import save_to_file

openai.api_key = os.getenv("OPENAI_API_KEY")


def load_names(fpath):
    """
    Load names of known objects in given environment.
    Assume 1 name per line in txt file, e.g. data/osm/osm_landmarks_corlw.txt
    """
    ftype = os.path.splitext(fpath)[-1][1:]
    if ftype == "txt":
        with open(fpath, 'r') as rf:
            names = [line.strip() for line in rf.readlines()]
    elif ftype == "json":
        with open(fpath, 'r') as rfile:
            names = json.load(rfile).keys()
    else:
        raise ValueError(f"ERROR: file type {ftype} not recognized")
    return names


def store_embeds(names):
    if args.model == "gpt3":
        ground_module = GPT3(args.gpt3_embed_engine)
    # elif args.model == 'bert':
    #     ground_module = BERT()
    else:
        raise ValueError("ERROR: grounding module not recognized")

    name2embed = {name: ground_module.get_embedding(name) for name in names}

    lmk_fname = Path(args.lmk_path).stem
    if args.model == "gpt3":
        save_fpath = f"data/osm/obj2embed_{lmk_fname}_{args.gpt3_embed_engine}.pkl"
    else:
        save_fpath = f"data/osm/obj2embed_{lmk_fname}_{args.model}.pkl"
    save_to_file(name2embed, save_fpath)
    return save_fpath


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--lmk_path", type=str, default="data/osm/osm_lmks/boston.json", help="fpath to landmarks.")
    parser.add_argument("--model", type=str, default="gpt3", choices=["gpt3", "bert"])
    parser.add_argument("--gpt3_embed_engine", type=str, default="text-embedding-ada-002")
    args = parser.parse_args()

    names = load_names(args.landmark_path)
    save_fpath = store_embeds(names)
    print(f"embeddings generated by {args.model} model, stored at {save_fpath}")
